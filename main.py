import asyncio
import logging
import os
import time
from datetime import datetime
import aiohttp
import aiofiles
import ssl
from openai import AsyncOpenAI, OpenAI
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.types import FSInputFile
from aiogram.utils.markdown import hbold
from aiogram.client.default import DefaultBotProperties


import ssl
import aiohttp

ssl_context = ssl.create_default_context()
ssl_context.check_hostname = False
ssl_context.verify_mode = ssl.CERT_NONE


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = os.getenv("TOKEN")
OPENAI_API_KEY = os.getenv("AITOKEN")
client = OpenAI(api_key=OPENAI_API_KEY)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode="HTML")
)
dp = Dispatcher()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)


try:
   thread_id_file = open('thread.txt', 'r')
   thread_id = thread_id_file.read()
   thread_id_file.close()
except:
    pass


def create_message(thread_id, message):
    thread_message = client.beta.threads.messages.create(
        thread_id,
        role="user",
        content=message,
    )


def message_list(thread_id):
    messages = client.beta.threads.messages.list(thread_id=thread_id)

    for msg in messages.data:
        if msg.role == "assistant":
            return "\n".join(block.text.value for block in msg.content if hasattr(block, "text"))

    return None  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –Ω–µ—Ç


def create_run(thread_id, assistant_id):
    current_date = datetime.now().strftime("%d %B %Y")
    old_instructions = client.beta.assistants.retrieve(assistant_id).instructions
    run = client.beta.threads.runs.create(
        thread_id=thread_id,
        assistant_id=assistant_id,
        instructions=f'{old_instructions}\n—Å–µ–≥–æ–¥–Ω—è {current_date}'
    )

    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    while run.status in ["queued", "in_progress"]:
        time.sleep(1)
        run = client.beta.threads.runs.retrieve(thread_id=thread_id, run_id=run.id)


def edit_instructions(assistant, new_instructions: str, old_instructions: str):
    instructions = old_instructions + '\n' + new_instructions
    my_updated_assistant = client.beta.assistants.update(
        assistant_id=assistant,
        instructions=instructions,
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def start_handler(message: types.Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {hbold(message.from_user.first_name)}!\n–Ø –±–æ—Ç —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ GPT-4o, DALL¬∑E-3 –∏ Whisper."
    )


# GPT-4o: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(F.text)
async def chat_handler(message: types.Message):
    print(message.from_user.id)
    if message.from_user.id == 404354012 or message.from_user.id == 422964820:

        if message.from_user.id == 404354012:
            assistant_id = 'asst_kCFa7ZkhnCCtRY8roDO3vpfh'
        elif message.from_user.id == 422964820:
            assistant_id = 'asst_85Boy7BUjKTcIRzb1Ejvl6ch'
        if '–∑–∞–ø–æ–º–Ω–∏' in message.text.lower():
            old_instructions = client.beta.assistants.retrieve(assistant_id).instructions
            edit_instructions(assistant_id, message.text[len('–∑–∞–ø–æ–º–Ω–∏'):], old_instructions)
            await message.reply('–ó–∞–ø–æ–º–Ω–∏–ª')
            return None
        if '–Ω–∞—Ä–∏—Å—É–π' in message.text.lower():
            text = message.text[7:].strip()
            if not text:
                await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ —Å–ª–æ–≤–∞ '–Ω–∞—Ä–∏—Å—É–π'.")
                return
            try:
                response = client.images.generate(
                    model="dall-e-3",
                    prompt=text,
                    n=1,
                    size="1024x1024"
                )
                image_url = response.data[0].url
                await message.answer_photo(photo=image_url, caption=f"–í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {text}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                await message.reply("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return None

        create_message(thread_id, message.text)
        create_run(thread_id, assistant_id)
        await message.reply(message_list(thread_id))


# üîπ –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ GPT-4o (gpt-4-turbo)
@dp.message(F.photo)
async def handle_photo(message: types.Message):
    if message.from_user.id == 404354012 or message.from_user.id == 422964820:
        photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        file_info = await bot.get_file(photo.file_id)
        file_url = f"https://api.telegram.org/file/bot{bot.token}/{file_info.file_path}"
        caption = "–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —Ñ–æ—Ç–æ?"
        if message.caption:
            caption = message.caption

        try:
            # üéØ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ GPT-4o (gpt-4-turbo)
            response = client.chat.completions.create(
                model="gpt-4-turbo",
                messages=[
                    {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."},
                    {"role": "user", "content": [
                        {"type": "text", "text": caption},
                        {"type": "image_url", "image_url": {"url": file_url}}
                    ]}
                ],
                max_tokens=500
            )

            # üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            answer = response.choices[0].message.content
            await message.answer(answer)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
            await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# üîπ –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
@dp.message(F.voice | F.audio | F.document)
async def handle_audio(message: types.Message):
    if message.from_user.id not in [404354012, 422964820]:
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if message.voice:
        file_id = message.voice.file_id
        file_format = "ogg"
    elif message.audio:
        file_id = message.audio.file_id
        file_format = message.audio.file_name.split(".")[-1]
    elif message.document:
        file_id = message.document.file_id
        file_format = message.document.file_name.split(".")[-1]
    else:
        await message.reply("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ.")
        return

    file_info = await bot.get_file(file_id)
    file_path = f"https://api.telegram.org/file/bot{bot.token}/{file_info.file_path}"
    local_filename = f"audio.{file_format}"

    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    try:
        async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(ssl=ssl_context)) as session:
            async with session.get(file_path) as resp:
                if resp.status == 200:
                    async with aiofiles.open(local_filename, "wb") as f:
                        await f.write(await resp.read())
                else:
                    await message.reply("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞.")
                    return
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        await message.reply("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞.")
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ OpenAI Whisper
    try:
        with open(local_filename, "rb") as audio_file:
            transcription = client.audio.transcriptions.create(
                model="whisper-1",
                file=audio_file,
                language="ru"  # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
            )
        if message.from_user.id == 404354012 or message.from_user.id == 422964820:

            if message.from_user.id == 404354012:
                assistant_id = 'asst_kCFa7ZkhnCCtRY8roDO3vpfh'
            elif message.from_user.id == 422964820:
                assistant_id = 'asst_85Boy7BUjKTcIRzb1Ejvl6ch'
            if '–∑–∞–ø–æ–º–Ω–∏' in transcription.text.lower():
                old_instructions = client.beta.assistants.retrieve(assistant_id).instructions
                edit_instructions(assistant_id, message.text[len('–∑–∞–ø–æ–º–Ω–∏'):], old_instructions)
                await message.reply('–ó–∞–ø–æ–º–Ω–∏–ª')
                return None
            if '–Ω–∞—Ä–∏—Å—É–π' in transcription.text.lower():
                text = transcription.text[7:].strip()
                if not text:
                    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ —Å–ª–æ–≤–∞ '–Ω–∞—Ä–∏—Å—É–π'.")
                    return
                try:
                    response = client.images.generate(
                        model="dall-e-3",
                        prompt=text,
                        n=1,
                        size="1024x1024"
                    )
                    image_url = response.data[0].url
                    await message.answer_photo(photo=image_url, caption=f"–í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {text}")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                    await message.reply("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return None

            create_message(thread_id, transcription.text)
            create_run(thread_id, assistant_id)
            await message.reply(message_list(thread_id))
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {e}")
        await message.reply("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞.")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
    file_path = os.path.join(os.getcwd(), 'thread.txt')

    if not os.path.exists(file_path):
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫, –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç
        thread = client.beta.threads.create()
        with open(file_path, 'w') as file:
            file.write(thread.id)
    else:
        # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π thread_id
        with open(file_path, 'r') as file:
            thread_id = file.read().strip()

        logging.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π thread_id: {thread_id}")

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())